// Mostly generated by copilot from response docs

export interface QuotesRes {
    quotes: Quote[];
}

// Some fields omitted for brevity, also location isn't exactly accurate but close enough
export interface Leg {
    trip_uid: string;
    origin: Partial<Location>;
    destination: Partial<Location>;
    departure: string;
    arrival: string;
}

// Fields omitted for brevity
export interface Quote {
    legs: Leg[];
}

export type LocationType = "STOP_POINT" | "STOP_AREA" | "STATION" | "CITY" | "COUNTRY";

export type Direction = "WESTBOUND" | "EASTBOUND";

export interface Location {
    id: number;
    type: LocationType;
    name: string;
    region_name: string;
    code: string;
    code_detail: string;
    detailed_name: string;
    direction?: Direction;
    lon: number;
    lat: number;
    atco_code: string;
    has_future_activity: boolean;
    timezone: string;
    zone: { latitude: number; longitude: number }[];
    heading: number;
    area_id: number;
    local_name?: string;
    google_place_id?: string;
};

export interface LocationTime {
    id: number;
    departure: {
        scheduled: string;
        actual?: string;
        estimated?: string;
    };
    arrival: {
        scheduled: string;
        actual?: string;
        estimated?: string;
    };
    allow_boarding: boolean;
    allow_drop_off: boolean;
    booking_cut_off_mins: number;
    pre_booked_only: boolean;
    skipped: boolean;
    location: Location;
}

export interface Vehicle {
    seat: number;
    wheelchair: number;
    bicycle: number;
    id: number;
    plate_number: string;
    name: string;
    has_wifi: boolean;
    has_toilet: boolean;
    type: string;
    brand: string;
    colour: string;
    is_backup_vehicle: boolean;
    owner_id: number;
    gps: {
        last_updated: string;
        longitude: number;
        latitude: number;
        heading: number;
    };
    secondary_gps: {
        last_updated: string;
        longitude: number;
        latitude: number;
        heading: number;
    };
}

export interface TripDescription {
    route_number: string;
    pattern_id: number;
    calendar_date: string;
    type: string;
    is_cancelled: boolean;
    route_id: number;
}

export interface Trip {
    description: TripDescription;
    vehicle: Vehicle;
    route: LocationTime[];
}

